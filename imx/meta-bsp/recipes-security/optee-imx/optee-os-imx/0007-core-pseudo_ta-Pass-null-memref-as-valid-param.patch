From 0d7ab3a0ccee14b4b2c9f5f703e43648de644deb Mon Sep 17 00:00:00 2001
From: Sumit Garg <sumit.garg@linaro.org>
Date: Tue, 8 Jan 2019 19:05:17 +0530
Subject: [PATCH 07/36] core: pseudo_ta: Pass null memref as valid param

GlobalPlatform spec allows null memory reference parameters as valid.
So update copy_in_params for pseudo_ta accordingly.

Also add check for mobj ptr being NULL before dereference as it causes
a data abort in case REE has passed NULL buffer ptr with size > 0 as
memref param.

Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 core/arch/arm/kernel/pseudo_ta.c | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/core/arch/arm/kernel/pseudo_ta.c b/core/arch/arm/kernel/pseudo_ta.c
index 39b1cdc9..f3f7b686 100644
--- a/core/arch/arm/kernel/pseudo_ta.c
+++ b/core/arch/arm/kernel/pseudo_ta.c
@@ -55,6 +55,7 @@ static TEE_Result copy_in_param(struct tee_ta_session *s __maybe_unused,
 {
 	size_t n;
 	void *va;
+	struct param_mem *mem;
 
 	for (n = 0; n < TEE_NUM_PARAMS; n++) {
 		switch (TEE_PARAM_TYPE_GET(param->types, n)) {
@@ -67,26 +68,24 @@ static TEE_Result copy_in_param(struct tee_ta_session *s __maybe_unused,
 		case TEE_PARAM_TYPE_MEMREF_INPUT:
 		case TEE_PARAM_TYPE_MEMREF_OUTPUT:
 		case TEE_PARAM_TYPE_MEMREF_INOUT:
-			if (!validate_in_param(s, param->u[n].mem.mobj))
+			mem = &param->u[n].mem;
+			if (!validate_in_param(s, mem->mobj))
 				return TEE_ERROR_BAD_PARAMETERS;
-			va = mobj_get_va(param->u[n].mem.mobj,
-					 param->u[n].mem.offs);
-			if (!va) {
+			va = mobj_get_va(mem->mobj, mem->offs);
+			if (!va && mem->size) {
 				TEE_Result res;
 
-				res  = mobj_reg_shm_map(param->u[n].mem.mobj);
+				res  = mobj_reg_shm_map(mem->mobj);
 				if (res)
 					return res;
 				did_map[n] = true;
-
-				va = mobj_get_va(param->u[n].mem.mobj,
-						 param->u[n].mem.offs);
+				va = mobj_get_va(mem->mobj, mem->offs);
 				if (!va)
 					return TEE_ERROR_BAD_PARAMETERS;
 			}
 
 			tee_param[n].memref.buffer = va;
-			tee_param[n].memref.size = param->u[n].mem.size;
+			tee_param[n].memref.size = mem->size;
 			break;
 		default:
 			memset(tee_param + n, 0, sizeof(TEE_Param));
-- 
2.17.1

