From 2e95c0c44db5fbe2580333074c94691b0228607f Mon Sep 17 00:00:00 2001
From: Jens Wiklander <jens.wiklander@linaro.org>
Date: Thu, 28 Mar 2019 16:51:29 +0100
Subject: [PATCH 20/36] libmbedtls: support mbedtls hash algorithm

1. Support mbedtls hash algorithm.
2. Add mbedtls source configure

Acked-by: Etienne Carriere <etienne.carriere@linaro.org>
Signed-off-by: Edison Ai <edison.ai@arm.com>
[jw: moved hash routines to hash.c using ops interface]
Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 lib/libmbedtls/core/hash.c                    | 194 ++++++++++++++++++
 lib/libmbedtls/core/stubbed.c                 |  37 ----
 lib/libmbedtls/core/sub.mk                    |   4 +
 .../include/mbedtls_config_kernel.h           |  20 ++
 4 files changed, 218 insertions(+), 37 deletions(-)
 create mode 100644 lib/libmbedtls/core/hash.c

diff --git a/lib/libmbedtls/core/hash.c b/lib/libmbedtls/core/hash.c
new file mode 100644
index 00000000..584727aa
--- /dev/null
+++ b/lib/libmbedtls/core/hash.c
@@ -0,0 +1,194 @@
+// SPDX-License-Identifier: BSD-2-Clause
+/*
+ * Copyright (C) 2018, ARM Limited
+ * Copyright (C) 2019, Linaro Limited
+ */
+
+#include <assert.h>
+#include <compiler.h>
+#include <crypto/crypto.h>
+#include <crypto/crypto_impl.h>
+#include <kernel/panic.h>
+#include <mbedtls/md.h>
+#include <mbedtls/sha256.h>
+#include <stdlib.h>
+#include <string_ext.h>
+#include <string.h>
+#include <tee_api_types.h>
+#include <utee_defines.h>
+#include <util.h>
+
+struct mbed_hash_ctx {
+	struct crypto_hash_ctx hash_ctx;
+	mbedtls_md_context_t md_ctx;
+};
+
+static const struct crypto_hash_ops mbed_hash_ops;
+
+static struct mbed_hash_ctx *to_hash_ctx(struct crypto_hash_ctx *ctx)
+{
+	assert(ctx && ctx->ops == &mbed_hash_ops);
+
+	return container_of(ctx, struct mbed_hash_ctx, hash_ctx);
+}
+
+static TEE_Result mbed_hash_init(struct crypto_hash_ctx *ctx)
+{
+	if (mbedtls_md_starts(&to_hash_ctx(ctx)->md_ctx))
+		return TEE_ERROR_BAD_STATE;
+
+	return TEE_SUCCESS;
+}
+
+static TEE_Result mbed_hash_update(struct crypto_hash_ctx *ctx,
+				   const uint8_t *data, size_t len)
+{
+	if (mbedtls_md_update(&to_hash_ctx(ctx)->md_ctx, data, len))
+		return TEE_ERROR_BAD_STATE;
+
+	return TEE_SUCCESS;
+}
+
+static TEE_Result mbed_hash_final(struct crypto_hash_ctx *ctx, uint8_t *digest,
+				  size_t len)
+{
+	struct mbed_hash_ctx *hc = to_hash_ctx(ctx);
+	size_t hash_size = mbedtls_md_get_size(hc->md_ctx.md_info);
+	uint8_t block_digest[TEE_MAX_HASH_SIZE] = { 0 };
+	uint8_t *tmp_digest = NULL;
+
+	if (len == 0)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	if (hash_size > len) {
+		if (hash_size > sizeof(block_digest))
+			return TEE_ERROR_BAD_STATE;
+		tmp_digest = block_digest; /* use a tempory buffer */
+	} else {
+		tmp_digest = digest;
+	}
+
+	if (mbedtls_md_finish(&hc->md_ctx, tmp_digest))
+		return TEE_ERROR_BAD_STATE;
+
+	if (hash_size > len)
+		memcpy(digest, tmp_digest, len);
+
+	return TEE_SUCCESS;
+}
+
+static void mbed_hash_free_ctx(struct crypto_hash_ctx *ctx)
+{
+	struct mbed_hash_ctx *hc = to_hash_ctx(ctx);
+
+	mbedtls_md_free(&hc->md_ctx);
+	free(hc);
+}
+
+static void mbed_hash_copy_state(struct crypto_hash_ctx *dst_ctx,
+				 struct crypto_hash_ctx *src_ctx)
+{
+	struct mbed_hash_ctx *src = to_hash_ctx(src_ctx);
+	struct mbed_hash_ctx *dst = to_hash_ctx(dst_ctx);
+
+	if (mbedtls_md_clone(&dst->md_ctx, &src->md_ctx))
+		panic();
+}
+
+static const struct crypto_hash_ops mbed_hash_ops = {
+	.init = mbed_hash_init,
+	.update = mbed_hash_update,
+	.final = mbed_hash_final,
+	.free_ctx = mbed_hash_free_ctx,
+	.copy_state = mbed_hash_copy_state,
+};
+
+static TEE_Result mbed_hash_alloc_ctx(struct crypto_hash_ctx **ctx_ret,
+				      mbedtls_md_type_t md_type)
+{
+	int mbed_res = 0;
+	struct mbed_hash_ctx *hc = NULL;
+	const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type(md_type);
+
+	if (!md_info)
+		return TEE_ERROR_NOT_SUPPORTED;
+
+	hc = calloc(1, sizeof(*hc));
+	if (!hc)
+		return TEE_ERROR_OUT_OF_MEMORY;
+
+	hc->hash_ctx.ops = &mbed_hash_ops;
+	mbed_res = mbedtls_md_setup(&hc->md_ctx, md_info, 0);
+	if (mbed_res) {
+		free(hc);
+		if (mbed_res == MBEDTLS_ERR_MD_ALLOC_FAILED)
+			return TEE_ERROR_OUT_OF_MEMORY;
+		return TEE_ERROR_NOT_SUPPORTED;
+	}
+
+	*ctx_ret = &hc->hash_ctx;
+
+	return TEE_SUCCESS;
+}
+
+#if defined(CFG_CRYPTO_MD5)
+TEE_Result crypto_md5_alloc_ctx(struct crypto_hash_ctx **ctx)
+{
+	return mbed_hash_alloc_ctx(ctx, MBEDTLS_MD_MD5);
+}
+#endif
+
+#if defined(CFG_CRYPTO_SHA1)
+TEE_Result crypto_sha1_alloc_ctx(struct crypto_hash_ctx **ctx)
+{
+	return mbed_hash_alloc_ctx(ctx, MBEDTLS_MD_SHA1);
+}
+#endif
+
+#if defined(CFG_CRYPTO_SHA224)
+TEE_Result crypto_sha224_alloc_ctx(struct crypto_hash_ctx **ctx)
+{
+	return mbed_hash_alloc_ctx(ctx, MBEDTLS_MD_SHA224);
+}
+#endif
+
+#if defined(CFG_CRYPTO_SHA256)
+TEE_Result crypto_sha256_alloc_ctx(struct crypto_hash_ctx **ctx)
+{
+	return mbed_hash_alloc_ctx(ctx, MBEDTLS_MD_SHA256);
+}
+#endif
+
+#if defined(CFG_CRYPTO_SHA384)
+TEE_Result crypto_sha384_alloc_ctx(struct crypto_hash_ctx **ctx)
+{
+	return mbed_hash_alloc_ctx(ctx, MBEDTLS_MD_SHA384);
+}
+#endif
+
+#if defined(CFG_CRYPTO_SHA512)
+TEE_Result crypto_sha512_alloc_ctx(struct crypto_hash_ctx **ctx)
+{
+	return mbed_hash_alloc_ctx(ctx, MBEDTLS_MD_SHA512);
+}
+#endif
+
+#if defined(CFG_CRYPTO_SHA256)
+TEE_Result hash_sha256_check(const uint8_t *hash, const uint8_t *data,
+			     size_t data_size)
+{
+	mbedtls_sha256_context hs;
+	uint8_t digest[TEE_SHA256_HASH_SIZE] = { 0 };
+
+	memset(&hs, 0, sizeof(hs));
+	mbedtls_sha256_init(&hs);
+	mbedtls_sha256_starts(&hs, 0);
+	mbedtls_sha256_update(&hs, data, data_size);
+	mbedtls_sha256_finish(&hs, digest);
+	mbedtls_sha256_free(&hs);
+
+	if (consttime_memcmp(digest, hash, sizeof(digest)))
+		return TEE_ERROR_SECURITY;
+	return TEE_SUCCESS;
+}
+#endif
diff --git a/lib/libmbedtls/core/stubbed.c b/lib/libmbedtls/core/stubbed.c
index 9e803199..914857b4 100644
--- a/lib/libmbedtls/core/stubbed.c
+++ b/lib/libmbedtls/core/stubbed.c
@@ -274,19 +274,6 @@ crypto_acipher_ecc_shared_secret(struct ecc_keypair *private_key __unused,
 }
 #endif /* CFG_CRYPTO_ECC */
 
-TEE_Result crypto_init(void)
-{
-	return TEE_ERROR_NOT_IMPLEMENTED;
-}
-
-#if defined(CFG_CRYPTO_SHA256)
-TEE_Result hash_sha256_check(const uint8_t *hash  __unused,
-		const uint8_t *data __unused,
-		size_t data_size __unused)
-{
-	return TEE_ERROR_NOT_IMPLEMENTED;
-}
-#endif
 
 TEE_Result crypto_aes_expand_enc_key(const void *key __unused,
 				     size_t key_len __unused,
@@ -312,30 +299,6 @@ void crypto_aes_enc_block(const void *enc_key __unused,
 	crypto_##name##_alloc_ctx(struct crypto_##type##_ctx **ctx __unused) \
 	{ return TEE_ERROR_NOT_IMPLEMENTED; }
 
-#if defined(CFG_CRYPTO_MD5)
-CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(md5, hash)
-#endif
-
-#if defined(CFG_CRYPTO_SHA1)
-CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(sha1, hash)
-#endif
-
-#if defined(CFG_CRYPTO_SHA224)
-CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(sha224, hash)
-#endif
-
-#if defined(CFG_CRYPTO_SHA256)
-CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(sha256, hash)
-#endif
-
-#if defined(CFG_CRYPTO_SHA384)
-CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(sha384, hash)
-#endif
-
-#if defined(CFG_CRYPTO_SHA512)
-CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(sha512, hash)
-#endif
-
 #if defined(CFG_CRYPTO_HMAC)
 CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(hmac_md5, mac)
 CRYPTO_ALLOC_CTX_NOT_IMPLEMENTED(hmac_sha1, mac)
diff --git a/lib/libmbedtls/core/sub.mk b/lib/libmbedtls/core/sub.mk
index d1c5df14..6c5d6858 100644
--- a/lib/libmbedtls/core/sub.mk
+++ b/lib/libmbedtls/core/sub.mk
@@ -1,3 +1,7 @@
 cflags-lib-$(CFG_CRYPTO_SIZE_OPTIMIZATION) += -Os
 
 srcs-y += stubbed.c
+srcs-y += tomcrypt.c
+srcs-$(call cfg-one-enabled, CFG_CRYPTO_MD5 CFG_CRYPTO_SHA1 CFG_CRYPTO_SHA224 \
+			     CFG_CRYPTO_SHA256 CFG_CRYPTO_SHA384 \
+			     CFG_CRYPTO_SHA512) += hash.c
diff --git a/lib/libmbedtls/include/mbedtls_config_kernel.h b/lib/libmbedtls/include/mbedtls_config_kernel.h
index dd37f824..d2d9e8b7 100644
--- a/lib/libmbedtls/include/mbedtls_config_kernel.h
+++ b/lib/libmbedtls/include/mbedtls_config_kernel.h
@@ -17,6 +17,26 @@
 /* Test if Mbedtls is the primary crypto lib */
 #ifdef CFG_CRYPTOLIB_NAME_mbedtls
 
+#if defined(CFG_CRYPTO_MD5)
+#define MBEDTLS_MD5_C
+#define MBEDTLS_MD_C
+#endif
+
+#if defined(CFG_CRYPTO_SHA1)
+#define MBEDTLS_SHA1_C
+#define MBEDTLS_MD_C
+#endif
+
+#if defined(CFG_CRYPTO_SHA224) || defined(CFG_CRYPTO_SHA256)
+#define MBEDTLS_SHA256_C
+#define MBEDTLS_MD_C
+#endif
+
+#if defined(CFG_CRYPTO_SHA384) || defined(CFG_CRYPTO_SHA512)
+#define MBEDTLS_SHA512_C
+#define MBEDTLS_MD_C
+#endif
+
 #endif /*CFG_CRYPTOLIB_NAME_mbedtls*/
 
 #include <mbedtls/check_config.h>
-- 
2.17.1

