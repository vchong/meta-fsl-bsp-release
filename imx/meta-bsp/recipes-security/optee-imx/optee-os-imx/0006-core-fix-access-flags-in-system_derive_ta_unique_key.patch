From b0c2fc11002c22b8ed2ae267b8d3e28403916d59 Mon Sep 17 00:00:00 2001
From: Jens Wiklander <jens.wiklander@linaro.org>
Date: Tue, 11 Jun 2019 12:37:18 +0200
Subject: [PATCH 06/36] core: fix access flags in system_derive_ta_unique_key()

Updates the access flags used to test that the supplied TA buffer is
indeed secure.

Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 core/arch/arm/pta/system.c | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/core/arch/arm/pta/system.c b/core/arch/arm/pta/system.c
index 320b0e6f..4f5bd73d 100644
--- a/core/arch/arm/pta/system.c
+++ b/core/arch/arm/pta/system.c
@@ -5,12 +5,15 @@
 /* Standard includes */
 #include <string.h>
 
+#include <crypto/crypto.h>
 #include <kernel/huk_subkey.h>
 #include <kernel/msg_param.h>
 #include <kernel/pseudo_ta.h>
 #include <kernel/user_ta.h>
+#include <mm/tee_mmu.h>
 #include <pta_system.h>
-#include <crypto/crypto.h>
+#include <tee_api_defines_extensions.h>
+#include <tee_api_defines.h>
 #include <util.h>
 
 #define MAX_ENTROPY_IN			32u
@@ -51,10 +54,12 @@ static TEE_Result system_derive_ta_unique_key(struct tee_ta_session *s,
 	size_t data_len = sizeof(TEE_UUID);
 	TEE_Result res = TEE_ERROR_GENERIC;
 	uint8_t *data = NULL;
+	uint32_t access_flags = 0;
 	uint32_t exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT,
 					  TEE_PARAM_TYPE_MEMREF_OUTPUT,
 					  TEE_PARAM_TYPE_NONE,
 					  TEE_PARAM_TYPE_NONE);
+	struct user_ta_ctx *utc = NULL;
 
 	if (exp_pt != param_types)
 		return TEE_ERROR_BAD_PARAMETERS;
@@ -64,8 +69,22 @@ static TEE_Result system_derive_ta_unique_key(struct tee_ta_session *s,
 	    params[1].memref.size > TA_DERIVED_KEY_MAX_SIZE)
 		return TEE_ERROR_BAD_PARAMETERS;
 
-	/* The derived key shall not end up in non-secure memory by mistake */
-	if (!tee_vbuf_is_sec(params[1].memref.buffer, params[1].memref.size))
+	utc = to_user_ta_ctx(s->ctx);
+
+	/*
+	 * The derived key shall not end up in non-secure memory by
+	 * mistake.
+	 *
+	 * Note that we're allowing shared memory as long as it's
+	 * secure. This is needed because a TA always uses shared memory
+	 * when communicating with another TA.
+	 */
+	access_flags = TEE_MEMORY_ACCESS_WRITE | TEE_MEMORY_ACCESS_ANY_OWNER |
+		       TEE_MEMORY_ACCESS_SECURE;
+	res = tee_mmu_check_access_rights(utc, access_flags,
+					  (uaddr_t)params[1].memref.buffer,
+					  params[1].memref.size);
+	if (res != TEE_SUCCESS)
 		return TEE_ERROR_SECURITY;
 
 	/* Take extra data into account. */
-- 
2.17.1

